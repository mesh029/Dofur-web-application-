'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generate = exports.COMMENTSDISPLAY_HIDDEN = exports.COMMENTSDISPLAY_NEWLINE = exports.COMMENTSDISPLAY_INLINE = exports.MOVESDISPLAY_HIDDEN = exports.MOVESDISPLAY_PUZZLE = exports.MOVESDISPLAY_TEXT = exports.MOVESDISPLAY_FIGURINE = exports.HEADERDISPLAY_VARIATIONS = exports.HEADERDISPLAY_LIVE = exports.HEADERDISPLAY_HIDDEN = exports.HEADERDISPLAY_JUSTIFIED = exports.HEADERDISPLAY_CENTERED = exports.BUTTONSDISPLAY_CUSTOM = exports.BUTTONSDISPLAY_STANDARD = exports.BUTTONSDISPLAY_HIDDEN = exports.HIGHLIGHT_NONE = exports.HIGHLIGHT_SQUARE = exports.HIGHLIGHT_BORDER = exports.PIECE_FONT_RANDOM = exports.PIECE_FONT_USCF = exports.PIECE_FONT_MERIDA = exports.PIECE_FONT_ALPHA = exports.PIECE_FONT_DEFAULT = exports.AUTOPLAY_MODE_NONE = exports.AUTOPLAY_MODE_LOOP = exports.AUTOPLAY_MODE_GAME = exports.PIECESIZE_DEFAULT = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Javascript implementation of
// http://pgn4web-board.casaschi.net/board-generator.html

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _pgnEncoder = require('./pgn-encoder');

var _pgnEncoder2 = _interopRequireDefault(_pgnEncoder);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PIECESIZE_DEFAULT = exports.PIECESIZE_DEFAULT = 'default';

var AUTOPLAY_MODE_GAME = exports.AUTOPLAY_MODE_GAME = 'g';
var AUTOPLAY_MODE_LOOP = exports.AUTOPLAY_MODE_LOOP = 'l';
var AUTOPLAY_MODE_NONE = exports.AUTOPLAY_MODE_NONE = 'n';

var PIECE_FONT_DEFAULT = exports.PIECE_FONT_DEFAULT = 'd';
var PIECE_FONT_ALPHA = exports.PIECE_FONT_ALPHA = 'a';
var PIECE_FONT_MERIDA = exports.PIECE_FONT_MERIDA = 'm';
var PIECE_FONT_USCF = exports.PIECE_FONT_USCF = 'u';
var PIECE_FONT_RANDOM = exports.PIECE_FONT_RANDOM = 'r';

var HIGHLIGHT_BORDER = exports.HIGHLIGHT_BORDER = 'b';
var HIGHLIGHT_SQUARE = exports.HIGHLIGHT_SQUARE = 's';
var HIGHLIGHT_NONE = exports.HIGHLIGHT_NONE = 'n';

var BUTTONSDISPLAY_HIDDEN = exports.BUTTONSDISPLAY_HIDDEN = 'h';
var BUTTONSDISPLAY_STANDARD = exports.BUTTONSDISPLAY_STANDARD = 's';
var BUTTONSDISPLAY_CUSTOM = exports.BUTTONSDISPLAY_CUSTOM = 'c';

var HEADERDISPLAY_CENTERED = exports.HEADERDISPLAY_CENTERED = 'c';
var HEADERDISPLAY_JUSTIFIED = exports.HEADERDISPLAY_JUSTIFIED = 'j';
var HEADERDISPLAY_HIDDEN = exports.HEADERDISPLAY_HIDDEN = 'h';
var HEADERDISPLAY_LIVE = exports.HEADERDISPLAY_LIVE = 'l';
var HEADERDISPLAY_VARIATIONS = exports.HEADERDISPLAY_VARIATIONS = 'v';

var MOVESDISPLAY_FIGURINE = exports.MOVESDISPLAY_FIGURINE = 'f';
var MOVESDISPLAY_TEXT = exports.MOVESDISPLAY_TEXT = 't';
var MOVESDISPLAY_PUZZLE = exports.MOVESDISPLAY_PUZZLE = 'p';
var MOVESDISPLAY_HIDDEN = exports.MOVESDISPLAY_HIDDEN = 'h';

var COMMENTSDISPLAY_INLINE = exports.COMMENTSDISPLAY_INLINE = 'i';
var COMMENTSDISPLAY_NEWLINE = exports.COMMENTSDISPLAY_NEWLINE = 'n';
var COMMENTSDISPLAY_HIDDEN = exports.COMMENTSDISPLAY_HIDDEN = 'h';

var defaults = {
  autoplayMode: AUTOPLAY_MODE_GAME,
  delay: 3000,
  initialGame: null,
  initialVariation: null,
  initialHalfmove: null,
  squareSize: 50,
  pieceSize: PIECESIZE_DEFAULT,
  pieceFont: PIECE_FONT_DEFAULT,
  lightColor: 'E8E8E8',
  darkColor: 'C2C9D1',
  boardBorderColor: 'C2C9D1',
  boardShadowColor: 'C2C9D1',
  backgroundColor: 'E8E8E8',
  highlightMode: HIGHLIGHT_BORDER,
  highlightColor: '7496AD',
  buttonsDisplay: BUTTONSDISPLAY_CUSTOM,
  controlBackgroundColor: 'D3DAE3',
  controlTextColor: '585B5E',
  headerDisplay: HEADERDISPLAY_JUSTIFIED,
  movesDisplay: MOVESDISPLAY_FIGURINE,
  textMargin: 25,
  fontHeaderColor: '000000',
  fontHeaderSize: 19,
  fontMovesColor: '000000',
  fontCommentsColor: '808080',
  fontVariationsColor: null, // default: fontCommentsColor
  highlightMoveColor: 'C7FFFF',
  fontMovesSize: 19,
  fontCommentsSize: null, // default: fontMovesSize
  fontVariationsSize: null, // default: fontCommentsSize
  commentsDisplay: COMMENTSDISPLAY_INLINE,
  framePadding: 25,
  horizontal: true,
  frameHeight: 'b', // TODO implement
  frameWidth: 'p' };

var sexEncodingCharSet = "$0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";

var hex2sex = function hex2sex(hex) {
  var sex = "";
  var dec = parseInt(hex, 16);
  while (dec > 0) {
    sex = sexEncodingCharSet.charAt(dec % 64) + sex;
    dec >>= 6;
  }
  while (sex.length < 4) {
    sex = sexEncodingCharSet.charAt(0) + sex;
  }
  return sex;
};

var percentFixForUrl = function percentFixForUrl(text) {
  return (text + '').replace(/%$/, 'p');
};

var generate = exports.generate = function generate(pgn) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var cfg = _extends({}, defaults, options);
  var boardWidth = 8 * cfg.squareSize + 6;
  var boardHeight = boardWidth;

  var multiGamesRegexp = /\s*\[\s*\w+\s*"[^"]*"\s*\]\s*[^\s\[\]]+[\s\S]*\[\s*\w+\s*"[^"]*"\s*\]\s*/m;
  var selectDropdownShown = multiGamesRegexp.test(pgn);

  if (cfg.buttonsDisplay != BUTTONSDISPLAY_HIDDEN) {
    if (cfg.buttonsDisplay == BUTTONSDISPLAY_STANDARD) {
      // in this case control padding grows with squareSize
      // while the size of the controls cant be predicted, so a safe number is set
      boardHeight += selectDropdownShown ? 2 * (25 + cfg.squareSize / 2) : 25 + cfg.squareSize / 2;
    } else {
      // in this case both control size and control padding grow with squareSize
      boardHeight += selectDropdownShown ? 2 * (5 + 1.1 * cfg.squareSize) : 5 + 1.1 * cfg.squareSize;
    }
  }
  boardHeight = Math.floor(boardHeight);

  var frameWidth = boardWidth + 2 * cfg.framePadding;
  var frameHeight = boardHeight + 2 * cfg.framePadding;

  // XXX
  frameWidth = '100%';

  var query = _querystring2.default.stringify({
    am: cfg.autoplayMode,
    d: cfg.delay,
    ig: cfg.initialGame,
    iv: cfg.initialVariation,
    ih: cfg.initialHalfmove,
    ss: cfg.squareSize,
    ps: cfg.pieceSize == PIECESIZE_DEFAULT ? 'd' : cfg.pieceSize,
    pf: cfg.pieceFont,
    lcs: hex2sex(cfg.lightColor),
    dcs: hex2sex(cfg.darkColor),
    bbcs: hex2sex(cfg.boardBorderColor),
    bscs: cfg.boardShadowColor && hex2sex(cfg.boardShadowColor),
    hm: cfg.highlightMode,
    hcs: hex2sex(cfg.highlightColor),
    bd: cfg.buttonsDisplay,
    cbcs: hex2sex(cfg.controlBackgroundColor),
    ctcs: hex2sex(cfg.controlTextColor),
    hd: cfg.headerDisplay,
    md: cfg.movesDisplay,
    tm: cfg.textMargin,
    fhcs: hex2sex(cfg.fontHeaderColor),
    fhs: percentFixForUrl(cfg.fontHeaderSize),
    fmcs: hex2sex(cfg.fontMovesColor),
    fccs: hex2sex(cfg.fontCommentsColor),
    fvcs: cfg.fontVariationsColor && hex2sex(cfg.fontVariationsColor),
    hmcs: hex2sex(cfg.highlightMoveColor),
    fms: percentFixForUrl(cfg.fontMovesSize),
    fcs: cfg.fontCommentsSize && percentFixForUrl(cfg.fontCommentsSize),
    fvs: cfg.fontVariationsSize && percentFixForUrl(cfg.fontVariationsSize),
    cd: cfg.commentsDisplay,
    bcs: cfg.backgroundColor ? hex2sex(cfg.backgroundColor) : 't',
    fp: cfg.framePadding,
    hl: cfg.horizontal ? 't' : 'f',
    pe: (0, _pgnEncoder2.default)(pgn)
  });

  var url = 'http://pgn4web-board.casaschi.net/?' + query;

  return {
    frameHeight: frameHeight, frameWidth: frameWidth, url: url
  };
};